name: Auto Update Magisk Alist

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      needs_update: ${{ steps.check_update.outputs.needs_update }}
      latest_version: ${{ steps.get_release.outputs.tag_name }}
      release_body: ${{ steps.get_release.outputs.body }}
      released: ${{ steps.check_own_release.outputs.released }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest official Alist release
        id: get_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: "AlistGo",
              repo: "alist",
            });
            const latest_release = releases.data.find(r => r.prerelease === false);
            if (!latest_release) throw new Error("No official release found");
            core.setOutput("tag_name", latest_release.tag_name);
            core.setOutput("body", latest_release.body);

      - name: Check if update is needed
        id: check_update
        run: |
          CURRENT_VERSION=$(grep '^version=' module.prop | cut -d= -f2)
          LATEST_VERSION="${{ steps.get_release.outputs.tag_name }}"
          echo "Current version: $CURRENT_VERSION, Latest version: $LATEST_VERSION"
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "needs_update=false" >> $GITHUB_OUTPUT
          else
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Check if release exists in this repo
        id: check_own_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latest_version = '${{ steps.get_release.outputs.tag_name }}';
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const exists = releases.data.some(r => r.tag_name === latest_version);
            core.setOutput("released", exists ? "true" : "false");

  update:
    needs: check
    if: needs.check.outputs.needs_update == 'true' || needs.check.outputs.released == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Update Version
        if: needs.check.outputs.needs_update == 'true'
        run: |
          VERSION="${{ needs.check.outputs.latest_version }}"
          CURRENT_CODE=$(grep '^versionCode=' module.prop | cut -d= -f2)
          NEW_CODE=$((CURRENT_CODE+1))
          sed -i "s/^version=.*/version=$VERSION/" module.prop
          sed -i "s/^versionCode=.*/versionCode=$NEW_CODE/" module.prop
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" update.json
          sed -i "s/\"versionCode\": .*/\"versionCode\": $NEW_CODE/" update.json
          sed -i "s/\"versionCode\": .*/\"versionCode\": $NEW_CODE,/" update.json
          sed -i "s#\"zipUrl\": \".*\"#\"zipUrl\": \"https://github.com/${GITHUB_REPOSITORY}/releases/download/$VERSION/magisk-alist-$VERSION.zip\"#" update.json
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add module.prop update.json
          git commit -m "Auto update Alist to ${{ needs.check.outputs.latest_version }}" || echo "No changes to commit"
          git push

      - name: Download and prepare Alist
        if: needs.check.outputs.released == 'false'
        run: |
          VERSION="${{ needs.check.outputs.latest_version }}"
          ALIST_TAR="alist-android-arm64.tar.gz"
          URL="https://github.com/AlistGo/alist/releases/download/$VERSION/$ALIST_TAR"
          echo "Downloading $URL"
          mkdir -p tmp system/bin
          curl -L "$URL" -o tmp/$ALIST_TAR
          tar -xzf tmp/$ALIST_TAR -C tmp
          ALIST_PATH=$(find tmp -type f -name alist | head -n 1)
          cp "$ALIST_PATH" system/bin/
          chmod +x system/bin/alist
          zip -r "magisk-alist-$VERSION.zip" *.sh system/* META-INF/* module.prop

      - name: Create GitHub release
        if: needs.check.outputs.released == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.check.outputs.latest_version }}
          name: ${{ needs.check.outputs.latest_version }}
          body: ${{ needs.check.outputs.release_body }}
          artifacts: magisk-alist-${{ needs.check.outputs.latest_version }}.zip
          draft: false
          prerelease: false
